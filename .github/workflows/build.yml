name: Arduino IDE

on:
  create:
  push:
    branches:
      - main
      - '[0-9]+.[0-9]+.x'
    paths-ignore:
      - '.github/**'
      - '!.github/workflows/build.yml'
      - '.vscode/**'
      - 'docs/**'
      - 'scripts/**'
      - 'static/**'
      - '*.md'
    tags:
      - '[0-9]+.[0-9]+.[0-9]+*'
  workflow_dispatch:
    inputs:
      paid-runners:
        description: Include builds on non-free runners
        type: boolean
        default: false
  pull_request:
    paths-ignore:
      - '.github/**'
      - '!.github/workflows/build.yml'
      - '.vscode/**'
      - 'docs/**'
      - 'scripts/**'
      - 'static/**'
      - '*.md'
  schedule:
    - cron: '0 3 * * *' # run every day at 3AM (https://docs.github.com/en/actions/reference/events-that-trigger-workflows#scheduled-events-schedule)

env:
  # See vars.GO_VERSION field of https://github.com/arduino/arduino-cli/blob/master/DistTasks.yml
  GO_VERSION: '1.19'
  # See: https://github.com/actions/setup-node/#readme
  NODE_VERSION: '18.17'
  CHANNEL_FILES_ARTIFACT: channel-files
  JOB_TRANSFER_ARTIFACT: build-artifacts
  CHANGELOG_ARTIFACTS: changelog
  BASE_BUILD_MATRIX: |
    [
      {
        "name": "Windows",
        "runs-on": "windows-2019",
        "certificate-secret": "WINDOWS_SIGNING_CERTIFICATE_PFX",
        "certificate-password-secret": "WINDOWS_SIGNING_CERTIFICATE_PASSWORD",
        "certificate-extension": "pfx"
      },
      {
        "name": "Linux",
        "runs-on": "ubuntu-20.04"
      },
      {
        "name": "macOS x86",
        "runs-on": "macos-latest",
        "certificate-secret": "APPLE_SIGNING_CERTIFICATE_P12",
        "certificate-password-secret": "KEYCHAIN_PASSWORD",
        "certificate-extension": "p12"
      }
    ]
  PAID_RUNNER_BUILD_MATRIX: |
    [
      {
        "name": "macOS ARM",
        "runs-on": "macos-latest-xlarge",
        "certificate-secret": "APPLE_SIGNING_CERTIFICATE_P12",
        "certificate-password-secret": "KEYCHAIN_PASSWORD",
        "certificate-extension": "p12"
      }
    ]

jobs:
  run-determination:
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.determination.outputs.result }}
    permissions: {}
    steps:
      - name: Determine if the rest of the workflow should run
        id: determination
        run: |
          RELEASE_BRANCH_REGEX="refs/heads/[0-9]+.[0-9]+.x"
          # The `create` event trigger doesn't support `branches` filters, so it's necessary to use Bash instead.
          if [[
            "${{ github.event_name }}" != "create" ||
            "${{ github.ref }}" =~ $RELEASE_BRANCH_REGEX
          ]]; then
            # Run the other jobs.
            RESULT="true"
          else
            # There is no need to run the other jobs.
            RESULT="false"
          fi

          echo "result=$RESULT" >> $GITHUB_OUTPUT

  select-targets:
    needs: run-determination
    if: needs.run-determination.outputs.result == 'true'
    runs-on: ubuntu-latest
    outputs:
      build-matrix: ${{ steps.generate-build-matrix.outputs.matrix }}
    steps:
      - name: Determine whether to run builds that use non-free runners
        id: paid-runner-determination
        run: |
          # Only run the builds that incur runner charges on release or select manually triggered runs.
          if [[
            "${{ startsWith(github.ref, 'refs/tags/') }}" == "true" ||
              "${{ github.event.inputs.paid-runners }}" == "true"
          ]]; then
            echo "use=true" >> $GITHUB_OUTPUT
          else
            echo "use=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate build matrix
        id: generate-build-matrix
        run: |
          if [[ "${{ steps.paid-runner-determination.outputs.use }}" == "true" ]]; then
            # Use -c to avoid the need to deal with multi-line content in workflow step output
            matrix="$(echo '{"base": ${{ env.BASE_BUILD_MATRIX }}, "paid_runner": ${{ env.PAID_RUNNER_BUILD_MATRIX }}}' | jq -c '.base + .paid_runner')"
          else
            matrix="$(echo '${{ env.BASE_BUILD_MATRIX }}' | jq -c '.')"
          fi

          echo "matrix=$matrix" >> $GITHUB_OUTPUT

  build:
    name: build (${{ matrix.config.name }})
    needs: select-targets
    env:
      # Location of artifacts generated by build.
      ARTIFACTS_PATH: electron-app/dist/build-artifacts
    strategy:
      matrix:
        config: ${{ fromJson(needs.select-targets.outputs.build-matrix) }}
    runs-on: ${{ matrix.config.runs-on }}
    timeout-minutes: 90

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'
          cache: 'yarn'

      - name: Install Python 3.x
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install Taskfile
        uses: arduino/setup-task@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          version: 3.x

      - name: Package
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AC_USERNAME: ${{ secrets.AC_USERNAME }}
          AC_PASSWORD: ${{ secrets.AC_PASSWORD }}
          AC_TEAM_ID: ${{ secrets.AC_TEAM_ID }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          IS_NIGHTLY: ${{ github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main') }}
          IS_RELEASE: ${{ startsWith(github.ref, 'refs/tags/') }}
          CAN_SIGN: ${{ secrets[matrix.config.certificate-secret] != '' }}
        run: |
          # See: https://www.electron.build/code-signing
          if [ $CAN_SIGN = false ]; then
            echo "Skipping the app signing: certificate not provided."
          else
            export CSC_LINK="${{ runner.temp }}/signing_certificate.${{ matrix.config.certificate-extension }}"
            echo "${{ secrets[matrix.config.certificate-secret] }}" | base64 --decode > "$CSC_LINK"
            export CSC_KEY_PASSWORD="${{ secrets[matrix.config.certificate-password-secret] }}"
            export CSC_FOR_PULL_REQUEST=true
          fi

          npx node-gyp install
          yarn install --immutable

          yarn --cwd arduino-ide-extension build
          yarn test
          yarn --cwd arduino-ide-extension test:slow
          yarn --cwd arduino-ide-extension lint

          yarn --cwd electron-app rebuild
          yarn --cwd electron-app build
          yarn --cwd electron-app package

      # Both macOS jobs generate a channel file with same path and name. The second job to complete would overwrite the
      # file generated by the first in the workflow artifact.
      - name: Stage macOS channel file
        if: runner.os == 'macOS'
        run: |
          mv "${{ env.ARTIFACTS_PATH }}/stable-mac.yml" "${{ env.ARTIFACTS_PATH }}/stable-mac-${{ runner.arch }}.yml"

      - name: Upload channel file artifact
        uses: actions/upload-artifact@v3
        with:
          if-no-files-found: error
          name: ${{ env.CHANNEL_FILES_ARTIFACT }}
          path: ${{ env.ARTIFACTS_PATH }}/*.yml

      # Avoid inclusion of staging macOS channel files in job transfer artifact
      - name: Remove channel file
        shell: bash
        run: |
          rm "${{ env.ARTIFACTS_PATH }}"/*.yml

      - name: Upload [GitHub Actions]
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.JOB_TRANSFER_ARTIFACT }}
          path: ${{ env.ARTIFACTS_PATH }}

  merge-channel-files:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Set environment variables
        run: |
          # See: https://docs.github.com/actions/using-workflows/workflow-commands-for-github-actions#setting-an-environment-variable
          echo "CHANNEL_FILES_PATH=${{ runner.temp }}/channel-files" >> "$GITHUB_ENV"

      - name: Checkout
        uses: actions/checkout@v4

      - name: Download channel files artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.CHANNEL_FILES_ARTIFACT }}
          path: ${{ env.CHANNEL_FILES_PATH }}

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'

      - name: Install Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install Task
        uses: arduino/setup-task@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          version: 3.x

      - name: Install dependencies
        run: yarn

      - name: Merge channel files
        run: |
          node ./scripts/merge-channel-files.js "${{ env.CHANNEL_FILES_PATH }}"

      - name: Upload channel files to job transfer artifact
        uses: actions/upload-artifact@v3
        with:
          if-no-files-found: error
          name: ${{ env.JOB_TRANSFER_ARTIFACT }}
          path: ${{ env.CHANNEL_FILES_PATH }}

  artifacts:
    name: ${{ matrix.artifact.name }} artifact
    needs: build
    if: always() && needs.build.result != 'skipped'
    runs-on: ubuntu-latest

    strategy:
      matrix:
        artifact:
          - path: '*Linux_64bit.zip'
            name: Linux_X86-64_zip
          - path: '*Linux_64bit.AppImage'
            name: Linux_X86-64_app_image
          - path: '*macOS_64bit.dmg'
            name: macOS_X86-64_dmg
          - path: '*macOS_64bit.zip'
            name: macOS_X86-64.zip
          - path: '*macOS_arm64.dmg'
            name: macOS_arm64_dmg
          - path: '*macOS_arm64.zip'
            name: macOS_arm64_zip
          - path: '*Windows_64bit.exe'
            name: Windows_X86-64_interactive_installer
          - path: '*Windows_64bit.msi'
            name: Windows_X86-64_MSI
          - path: '*Windows_64bit.zip'
            name: Windows_X86-64_zip

    steps:
      - name: Download job transfer artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.JOB_TRANSFER_ARTIFACT }}
          path: ${{ env.JOB_TRANSFER_ARTIFACT }}

      - name: Upload tester build artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact.name }}
          path: ${{ env.JOB_TRANSFER_ARTIFACT }}/${{ matrix.artifact.path }}

  changelog:
    needs: build
    runs-on: ubuntu-latest
    outputs:
      BODY: ${{ steps.changelog.outputs.BODY }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # To fetch all history for all branches and tags.

      - name: Generate Changelog
        id: changelog
        env:
          IS_RELEASE: ${{ startsWith(github.ref, 'refs/tags/') }}
        run: |
          export LATEST_TAG=$(git describe --abbrev=0)
          export GIT_LOG=$(git log --pretty=" - %s [%h]" $LATEST_TAG..HEAD | sed 's/ *$//g')
          if [ "$IS_RELEASE" = true ]; then
            export BODY=$(echo -e "$GIT_LOG")
          else
            export LATEST_TAG_WITH_LINK=$(echo "[$LATEST_TAG](https://github.com/arduino/arduino-ide/releases/tag/$LATEST_TAG)")
            if [ -z "$GIT_LOG" ]; then
                export BODY="There were no changes since version $LATEST_TAG_WITH_LINK."
            else
                export BODY=$(echo -e "Changes since version $LATEST_TAG_WITH_LINK:\n$GIT_LOG")
            fi
          fi
          echo -e "$BODY"

          # Set workflow step output
          # See: https://docs.github.com/actions/using-workflows/workflow-commands-for-github-actions#multiline-strings
          DELIMITER="$RANDOM"
          echo "BODY<<$DELIMITER" >> $GITHUB_OUTPUT
          echo "$BODY" >> $GITHUB_OUTPUT
          echo "$DELIMITER" >> $GITHUB_OUTPUT

          echo "$BODY" > CHANGELOG.txt

      - name: Upload Changelog [GitHub Actions]
        if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main')
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.JOB_TRANSFER_ARTIFACT }}
          path: CHANGELOG.txt

  publish:
    needs:
      - changelog
      - merge-channel-files
    if: github.repository == 'arduino/arduino-ide' && (github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main'))
    runs-on: ubuntu-latest
    steps:
      - name: Download [GitHub Actions]
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.JOB_TRANSFER_ARTIFACT }}
          path: ${{ env.JOB_TRANSFER_ARTIFACT }}

      - name: Publish Nightly [S3]
        uses: docker://plugins/s3
        env:
          PLUGIN_SOURCE: '${{ env.JOB_TRANSFER_ARTIFACT }}/*'
          PLUGIN_STRIP_PREFIX: '${{ env.JOB_TRANSFER_ARTIFACT }}/'
          PLUGIN_TARGET: '/arduino-ide/nightly'
          PLUGIN_BUCKET: ${{ secrets.DOWNLOADS_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  release:
    needs:
      - changelog
      - merge-channel-files
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Download [GitHub Actions]
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.JOB_TRANSFER_ARTIFACT }}
          path: ${{ env.JOB_TRANSFER_ARTIFACT }}

      - name: Get Tag
        id: tag_name
        run: |
          echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Publish Release [GitHub]
        uses: svenstaro/upload-release-action@2.7.0
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          release_name: ${{ steps.tag_name.outputs.TAG_NAME }}
          file: ${{ env.JOB_TRANSFER_ARTIFACT }}/*
          tag: ${{ github.ref }}
          file_glob: true
          body: ${{ needs.changelog.outputs.BODY }}

      # Temporary measure to prevent release update offers before the manually produced builds are uploaded.
      # The step must be removed once fully automated builds are regained.
      - name: Remove "channel update info files" related to manual builds
        run: |
          # See: https://github.com/arduino/arduino-ide/issues/2018
          rm "${{ env.JOB_TRANSFER_ARTIFACT }}/stable-linux.yml"
          # See: https://github.com/arduino/arduino-ide/issues/408
          rm "${{ env.JOB_TRANSFER_ARTIFACT }}/stable-mac.yml"

      - name: Publish Release [S3]
        if: github.repository == 'arduino/arduino-ide'
        uses: docker://plugins/s3
        env:
          PLUGIN_SOURCE: '${{ env.JOB_TRANSFER_ARTIFACT }}/*'
          PLUGIN_STRIP_PREFIX: '${{ env.JOB_TRANSFER_ARTIFACT }}/'
          PLUGIN_TARGET: '/arduino-ide'
          PLUGIN_BUCKET: ${{ secrets.DOWNLOADS_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  clean:
    # This job must run after all jobs that use the transfer artifact.
    needs:
      - build
      - merge-channel-files
      - publish
      - release
      - artifacts
    if: always() && needs.build.result != 'skipped'
    runs-on: ubuntu-latest

    steps:
      - name: Remove unneeded job transfer artifact
        uses: geekyeggo/delete-artifact@v2
        with:
          name: ${{ env.JOB_TRANSFER_ARTIFACT }}
